generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MANAGER
  SALES_PERSON
}

model User {
  id        String   @id @default(uuid())
  name      String
  role      UserRole @default(SALES_PERSON)
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sales     Sale[]
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subCategories SubCategory[]
  products      Product[]
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String
  description String
  Category    Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  String
  products    Product[]
}

model Unit {
  id          String    @id @default(uuid())
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Customer {
  id          String   @id @default(uuid())
  name        String
  email       String
  phoneNumber String
  address     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sales       Sale[]
}

model Product {
  id            String       @id @default(uuid())
  name          String
  description   String
  imageUrl      String
  brand         Brand        @relation(fields: [brandId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  brandId       String
  category      Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  categoryId    String
  unit          Unit         @relation(fields: [unitId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  unitId        String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  stocks        Stock[]
  SubCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  subCategoryId String?
}

model Stock {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  productId     String
  quantity      Float
  price         Float
  purchasePrice Float
}

model Sale {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now()) @db.Timestamp(0)
  updatedAt       DateTime @default(now()) @updatedAt @db.Timestamp(0)
  customer        Customer @relation(fields: [customerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  customerId      String
  totalPrice      Float
  discountedPrice Float
  status          String
  paidAmount      Float
  dueAmount       Float
  seller          User     @relation(fields: [sellerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  sellerId        String
}
